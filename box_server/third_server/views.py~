import json
from django.shortcuts import render
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.http import HttpResponse, HttpResponseRedirect
from django.views.decorators.csrf import csrf_exempt
import requests
from weshare.models import *
import string
import random
import subprocess
import os
import StringIO
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))


def index(request):
    return HttpResponse("Hello, world. You're at WEShare's homepage.")

CP_S = "434336848578337218341214260561421761808708582474"
CP_P_Z = "[485164726370323467124074260233492946861847529459929519150364656084368044170078092711568472160896386202350255062119206936886501090635639324685518716362909, 1420614974013590573601794720524695121216787292675633636150927637117045095910326819736503816801291160284744860280827017393743982046739018274437630615953182]"
CP_P_GX = "[2580132760477966294687170050702866145025302527944651901850370141192513839244890715259935207146358981633729772733506594191029043882548506812910970010354567, 3438883271788272386454338948645339467415675045083482674427965232110694572983787812103745557252412520665839147287289100266084483306930193990158131666669346]"

def keygen(id_set):
    try:
        ret_set = []
        new_id = []
        print id_set
        for id in id_set:
            try:
                rq_user = User.objects.get(box_id=id)
                ret_set.append(rq_user)
            except Exception as e:
                if not (id in new_id):
                    new_id.append(id)

        if len(new_id):
            print "Request user(s) doesn't exist, creating one..."
            print PROJECT_ROOT
            f = open("/tmp/ids.txt", "w")
            for id in new_id:
                f.write(id+"\n")
            f.close()
            subprocess.check_output(['echo', '$HOME'])
            print "after echo test"
            process = subprocess.check_output(PROJECT_ROOT+"/../backend/main key_pair_gen", shell=True, stderr=subprocess.STDOUT)
            #print process

            f = open("/tmp/key.txt", "r")
            for i in new_id:
                id = f.readline().strip()
                hid = f.readline().strip()
                s = f.readline().strip()
                p_gx = f.readline().strip()
                p_z = f.readline().strip()
                rq_user = User(box_id=id, HID=hid, s=s, p_gx=p_gx, p_z=p_z)
                rq_user.save()
                ret_set.append(rq_user)
        return ret_set
    except Exception as e:
        print "Errors " + str(e)
        raise e

@csrf_exempt
def query_keys(request):
    data = request.POST
    try:
        owner_id = data['owner']
        receip_ids = data['recipient'].split(" ")
        owner = keygen([owner_id])[0]
        receips = keygen(receip_ids)
        ret_data = {
            "fo_id": owner.box_id,
            "fo_x": owner.s,
            "fo_z": owner.p_z,
            "fo_gx": owner.p_gx,

            'cp_s': CP_S,
            'cp_z': CP_P_Z,
            'cp_gx': CP_P_GX,
            'n_shared': len(receips)
        }
        i=0
        for r in receips:
            ret_data[str(i)+"_r_id"] = r.box_id
            ret_data[str(i)+"_r_z"] = r.p_z
            ret_data[str(i)+"_r_gx"] = r.p_gx
            ret_data[str(i)+"_r_s"] = r.s
            i+=1
    except Exception as e:
        print "Errors " + str(e)
        ret_data={
            'success': False,
            'error': str(e)
        }
    rdata = json.dumps(ret_data)
    return HttpResponse(rdata, content_type='application/json')

#This is called when user uploads any function
@csrf_exempt
def upload_api(request):
    try:
        data = request.POST
        file_id = data['file_id']
        # file_id = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10))
        print "uploading file: " + file_id
        #for u, v in data.iteritems():
        #    print u, v
        #    print "\n"

        fo_box_id = data['public_key[owner]']
        try:
            fo = User.objects.get(box_id=fo_box_id)
        except Exception as e:
            print "File owner not found" + str(e) + "\n"
            raise e


        #create a record in FILEDB
        g = data['public_key[g]']
        h = data['public_key[h]']
        gb = data['public_key[g_b]']
        gb2 = data['public_key[g_b2]']
        hb = data['public_key[h_b]']
        pair_alpha = data['public_key[pair_alpha]']

        gaz = data['public_key[ct_gaz]']
        inv_z=data['public_key[ct_inv_z]']
        ct_S=data['public_key[S]']
        k0=data['public_key[k0]']
        NS=int(data['n_shared'])

        new_file = FileDB(file_id=file_id, owner=fo, g=g, h=h, gb=gb, gb2=gb2, gaz=gaz, hb=hb, pa=pair_alpha, inv_z=inv_z, ct_s = ct_S, k0=k0)
        new_file.save()



        f_prk=open("/tmp/proxy_keys.txt", "w")
        f_prk.write(CP_S+'\n')
        for i in range(NS):
            try:
                shared_user = User.objects.get(box_id=data[str(i)+'[r_id]'])
            except Exception as e:
                print "Some error" + str(e) + "\n"

            try:
                old_rk = ReEncryption.objects.get(user_a=fo, user_b=shared_user)
            except Exception as e:
                print("Saving new ReEncryption key for " + str(fo) + "and" + str(shared_user) +"\n")
                rk=data[str(i)+'[rk]']
                old_rk=ReEncryption(user_a=fo, user_b=shared_user, re_key=rk)
                old_rk.save()
            f_prk.write(shared_user.box_id+"\n")
            f_prk.write(old_rk.re_key+'\n')
        f_prk.close()

        #writing to files, should be in the correct orders to read later
        f_pk=open("/tmp/pubkey.txt", "w")
        f_pk.write(g+"\n")
        f_pk.write(h+"\n")
        f_pk.write(gb+"\n")
        f_pk.write(gb2+"\n")
        f_pk.write(hb+"\n")
        f_pk.write(pair_alpha+"\n")
        f_pk.close()

        f_bk=open("/tmp/blinded_key.txt", "w")
        f_bk.write(str(NS)+'\n')
        f_bk.write(gaz+"\n")
        f_bk.write(inv_z+"\n")
        f_bk.write(k0+"\n")
        f_bk.close()


        #call backend to compute the secret key
        process = subprocess.check_output(PROJECT_ROOT+"/../backend/main keygen", shell=True, stderr=subprocess.STDOUT)
        if (process):
            raise Exception("Something errors")
        f = open("/tmp/seckey.txt", "r")

        ret_data={
            'success': True,
        }
        for i in range(NS):
            r_id = f.readline().strip()
            r_D0 = f.readline().strip()
            r_D1 = f.readline().strip()
            r_D2 = f.readline().strip()
            r_inv_z = f.readline().strip()
            r_k0 = f.readline().strip()

            try:
                shared_user = User.objects.get(box_id=r_id)
            except Exception as e:
                print "Some error" + str(e) + "\n"
                raise e

            try:
                new_recipient=Recipient(file_id=new_file, user_id=shared_user,
                                        D0=r_D0, D1=r_D1, D2=r_D2, inv_z=r_inv_z, k0=r_k0)
                new_recipient.save()
                ret_data[i] = True
            except Exception as e:
                print "Recipient erros" + str(e) + "\n"
                raise e

    except Exception as e:
        print "Error(s) happens" + str(e)
        ret_data={
            'success': True,
            'error': str(e)
        }

    rdata = json.dumps(ret_data)
    return HttpResponse(rdata, content_type='application/json')


def demo_download(request, file_id, user_id):
    #print file_id
    #print user_id
    try:
        f = FileDB.objects.get(file_id=file_id)
        u = User.objects.get(box_id=user_id)
        recep = Recipient.objects.get(file_id=f, user_id=u)

        seckey={
            "uid": user_id,
            "ID": u.HID,
            "D2": recep.D2,
            "D0": recep.D0,
            "D1": recep.D1,
            "inv_z": recep.inv_z,
            "r_sk": u.s,
            'k0': recep.k0
        }

        pubkey={
            "g": f.g,
            "h": f.h,
            "g_b": f.gb,
            "g_b2": f.gb2,
            "h_b": f.hb,
            "pair_alpha": f.pa
        }
        ret_data={
            'success': True,
            "seckey": seckey,
            "keys": pubkey
        }
    except Exception as e:
        print "Error(s) happens" + str(e)
        ret_data={
            'success': False,
            'error': str(e)
        }

    rdata = json.dumps(ret_data)
    return HttpResponse(rdata, content_type='application/json')

def demo_download_from_box(request, file_id, access_token):
    #16600831793/IwsXugGtipPIKMKODaAnYYmjHRGwmOAp
    url = 'https://api.box.com/2.0/files/' + file_id + '/content'
    auth = 'Bearer ' + access_token
    payload = {
        'crossDomain': True,
        'dataType': 'json',
        'content-type': 'application/json'
    }
    #print payload
    headers = {
        "Authorization": auth
    }
    while True:
        r = requests.get(url, data=json.dumps(payload), headers=headers)
        if len(r.text):
            break
    #print "This is the splitter"
    some_data_to_dump = {
       'content': r.text,
    }    
    # print r.content
    print 'done'
    data = json.dumps(some_data_to_dump)
    return HttpResponse(data, content_type='application/json')


def query_keys_for_revocation(request, file_id):
    try:
        f = FileDB.objects.get(file_id=file_id)
        fo = f.owner
        ret_data={
            'success': True,
            "g": f.g,
            "h": f.h,
            "g_b": f.gb,
            "g_b2": f.gb2,
            "h_b": f.hb,
            'S': f.ct_s,

            'fo_s': fo.s,
            "fo_z": fo.p_z,
            "fo_gx": fo.p_gx,

            "pair_alpha": f.pa,
            'cp_z': CP_P_Z,
            'cp_gx': CP_P_GX,
            'cp_s': CP_S,
        }
    except Exception as e:
        print "Error(s) happens" + str(e)
        ret_data={
            'success': False,
            'error': str(e)
        }

    data = json.dumps(ret_data)
    return HttpResponse(data, content_type='application/json')

def download_content_from_box(file_id, access_token):
    #16600831793/IwsXugGtipPIKMKODaAnYYmjHRGwmOAp
    url = 'https://api.box.com/2.0/files/' + file_id + '/content'
    auth = 'Bearer ' + access_token
    payload = {
        'crossDomain': True,
        'dataType': 'json',
        'content-type': 'application/json'
    }

    headers = {
        "Authorization": auth
    }
    while True:
        r = requests.get(url, data=json.dumps(payload), headers=headers)
        if len(r.text):
            break

    print "Done download content from box"
    #print "This is the splitter"
    return str(r.text)

def update_to_box(file_id, access_token):
    url = 'https://upload.box.com/api/2.0/files/'+file_id+'/content'
    auth = 'Bearer ' + access_token


    headers = {
        "Authorization": auth
    }
    f = open("/tmp/update_c.txt", "r")

    r = requests.post(url, headers=headers, files={'file': f})
    #print r.json()
    print 'update to box done' + str(file_id)



@csrf_exempt
def complete_revocation(request):

    try:
        data = request.POST

        file_id = data['file_id']
        token = data['access_token']
        delta_k = data['delta_k']
        file_name = data['file_name']
        isneg = data['isneg']
        newS = data['S']

        file = FileDB.objects.get(file_id = file_id)
        file.ct_s = newS
        file.save()

        fileContent = download_content_from_box(file_id, token)
        contentList = fileContent.split("\n")
        f = open("/tmp/content.txt", "w")
        f.write(contentList[0] + '\n')
        f.write(str(isneg) + "\n")
        f.write(contentList[1] + '\n')
        f.write(str(delta_k) + '\n')
        f.write(CP_S + '\n')
        f.write(contentList[2] + "\n")
        f.close()

        process = subprocess.check_output(PROJECT_ROOT+"/../backend/main revocation", shell=True, stderr=subprocess.STDOUT)


        update_to_box(file_id, token)

        ret_data={
            'success': True,
        }
    except Exception as e:
        print str(e)
        ret_data={
            'success': False,
            'error': str(e)
        }

    data = json.dumps(ret_data)
    return HttpResponse(data, content_type='application/json')


@csrf_exempt
def update_patch(request):
    try:
        data=request.POST
        token = data['access_token']
        file_id = data['file_id']
        NB = data['NB']
        content = data['content']
        lastBlockLen = data['filePadding']
        preContent = download_content_from_box(file_id, token)

        f=open("/tmp/temp.tmp", "w")
        f.write(NB+"\n")
        f.write(preContent.split("\n")[1])
        f.write(content + "\n")
        f.write(preContent.split("\n")[2]+str(lastBlockLen) + "-")
        f.close()


        url = 'https://upload.box.com/api/2.0/files/'+file_id+'/content'
        auth = 'Bearer ' + token


        headers = {
            "Authorization": auth
        }

        f = open("/tmp/temp.tmp", "r")
        r = requests.post(url, headers=headers, files={'file': f})
        #print r.json()
        print "Done updating new content to Box" + str(file_id)

        ret_data={
            'success': True,
        }
    except Exception as e:
        print str(e)
        ret_data={
            'success': False,
            'error': str(e)
        }
    data = json.dumps(ret_data)
    return HttpResponse(data, content_type='application/json')
